@use "variable" as v;
/*************************************************
common-style
*************************************************/
@mixin base_width {
  margin: 0 auto;
  width: 1200px;
}
// @extendでスタイルの継承
// @mixinでステイルの定義
// @includeでmixinの呼び出し

// ブレイクポイント
// PC基準でコーディングする場合
$breakpoints: (
  "sm": "screen and (max-width: 768px)",
  //スマホ
  "md": "screen and (max-width: 1023px)",
  //タブレット
) !default;
@mixin mq($breakpoint: sm) {
  @media #{map-get($breakpoints , $breakpoint)} {
    @content;
  }
}

@mixin flex($justify: 0, $align: 0, $wrap: 0, $wrap_align: 0) {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;

  // justify-content水平方向揃え（第一引数）
  @if $justify == start {
    // 左揃え
    -webkit-justify-content: flex-start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  } @else if $justify == end {
    // 右揃え
    -webkit-justify-content: flex-end;
    -ms-flex-pack: end;
    justify-content: flex-end;
  } @else if $justify == center {
    // 中央揃え
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
  } @else if $justify == between {
    // 両端配置
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
  } @else if $justify == around {
    // 均等配置
    -webkit-justify-content: space-around;
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }

  // align-items垂直方向揃え（第二引数）
  @if $align == start {
    // 上揃え
    -webkit-align-items: flex-start;
    -ms-flex-align: start;
    align-items: flex-start;
  } @else if $align == end {
    // 下揃え
    -webkit-align-items: flex-end;
    -ms-flex-align: end;
    align-items: flex-end;
  } @else if $align == center {
    // 中央揃え
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
  } @else if $align == baseline {
    // ベースライン
    -webkit-align-items: baseline;
    -ms-flex-align: baseline;
    align-items: baseline;
  } @else if $align == stretch {
    // 高さ揃え
    -webkit-align-items: stretch;
    -ms-flex-align: stretch;
    align-items: stretch;
  }

  // flex-wrap子要素の折り返し設定（第三引数）
  @if $wrap == nowrap {
    // 折り返ししない
    -webkit-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  } @else if $wrap == wrap {
    // 上から下
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  } @else if $wrap == reverse {
    // 下から上
    -webkit-flex-wrap: wrap-reverse;
    -ms-flex-wrap: wrap-reverse;
    flex-wrap: wrap-reverse;
  }

  // align-content複数行設定（第四引数）
  @if $wrap_align == start {
    // 上揃え
    -webkit-align-content: flex-start;
    -ms-flex-line-pack: start;
    align-content: flex-start;
  } @else if $wrap_align == end {
    // 下揃え
    -webkit-align-content: flex-end;
    -ms-flex-line-pack: end;
    align-content: flex-end;
  } @else if $wrap_align == center {
    // 中央揃え
    -webkit-align-content: center;
    -ms-flex-line-pack: center;
    align-content: center;
  } @else if $wrap_align == between {
    // 両端配置
    -webkit-align-content: space-between;
    -ms-flex-line-pack: justify;
    align-content: space-between;
  } @else if $wrap_align == around {
    // 均等配置
    -webkit-align-content: space-around;
    -ms-flex-line-pack: distribute;
    align-content: space-around;
  } @else if $wrap_align == stretch {
    // 高さ揃え
    -webkit-align-content: stretch;
    -ms-flex-line-pack: stretch;
    align-content: stretch;
  }
}

@mixin center($use-left: true, $use-top: true) {
  @if $use-left {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $use-top {
    top: 50%;
    transform: translateY(-50%);
  }
  @if $use-left and $use-top {
    transform: translate(-50%, -50%);
  }
}

* {
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
  scroll-behavior: smooth;
}

body {
  scroll-behavior: smooth;
  font-family: YakuHanJP, "Hiragino Sans", "Arial", "Hiragino Kaku Gothic ProN",
    "Noto Sans JP", Meiryo, sans-serif;
  min-height: 100dvh;
}

.clearfix:after {
  content: "";
  display: block;
  clear: both;
}

// /iOSでのデフォルトスタイルをリセット /
input[type="submit"],
input[type="button"] {
  border-radius: 0;
  -webkit-box-sizing: content-box;
  -webkit-appearance: button;
  appearance: button;
  border: none;
  box-sizing: border-box;
  &::-webkit-search-decoration {
    display: none;
  }
  &:focus {
    outline-offset: -2px;
  }
}

.inner {
  max-width: 1200px;
  margin: 0 auto;
  @include mq(md) {
    width: 85%;
    max-width: 1000px;
  }
  @include mq() {
    width: 90%;
    max-width: 600px;
  }
}

.sub-ttl {
  font-family: "Lora", serif;
  font-size: 1.6rem;
  font-weight: 400;
}

h2 {
  font-family: "Noto Serif JP", serif;
  font-size: 2.8rem;
  font-weight: 700;
}

h3,
div,
p,
li,
dt,
dd,
th,
td,
a {
  font-size: 1.5rem;
  line-height: 1.7;
  font-weight: 400;
  color: v.$txt-color;
  @include mq() {
    font-size: 1.4rem;
  }
}
div {
  line-height: 1;
}
// p {
//   overflow-wrap: break-word;
// }

.font-noto {
  font-family: "Noto Serif JP", serif;
}
.font-lora {
  font-family: "Lora", serif;
}

.img-box {
  img {
    width: 100%;
  }
}

.obj-fit {
  img {
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
}

.h-scale {
  .img-box {
    overflow: hidden;
  }
  img {
    transition: all 0.3s;
  }
  &:hover {
    img {
      transform: scale(1.1);
    }
  }
}
